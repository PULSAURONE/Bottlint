# START OF FILE Dockerfile #

# Этап 1: Базовый образ
# Используем официальный образ Python 3.11 в "slim" варианте. Он содержит
# все необходимое для запуска Python, но без лишних пакетов, что уменьшает размер.
FROM python:3.11-slim

# Установка системных переменных для корректной работы с языками и кодировками
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Этап 2: Установка системных зависимостей
# Нам нужен ffmpeg для корректной работы библиотеки pydub (обработка аудио).
# apt-get update - обновляет список пакетов.
# apt-get install -y --no-install-recommends - устанавливает пакеты без лишних рекомендаций.
# rm -rf /var/lib/apt/lists/* - очищает кэш apt, чтобы уменьшить размер итогового образа.
RUN apt-get update && \
    apt-get install -y --no-install-recommends ffmpeg && \
    rm -rf /var/lib/apt/lists/*

# Этап 3: Установка Python-зависимостей
# Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды будут выполняться из этой директории.
WORKDIR /app

# Копируем только файл с зависимостями.
# Этот слой будет кэшироваться и пересобираться только если requirements.txt изменится.
COPY requirements.txt .

# Устанавливаем зависимости.
# --no-cache-dir - не сохранять кэш pip, что также уменьшает размер образа.
RUN pip install --no-cache-dir -r requirements.txt

# Этап 4: Копирование кода приложения
# Копируем весь остальной код из текущей директории (где лежит Dockerfile)
# в рабочую директорию /app внутри контейнера.
# Файлы, указанные в .dockerignore, будут проигнорированы.
COPY . .

# Этап 5: Запуск приложения
# Указываем команду, которая будет выполнена при запуске контейнера.
# Это эквивалентно запуску `python main.py` в терминале.
CMD ["python", "main.py"]

# END OF FILE Dockerfile #