# START OF FILE config.py #

import os
import logging
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ data –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞
DATA_DIR = os.path.join(BASE_DIR, 'data')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    logger.critical("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ ---
TEXT_AI_PROVIDER = os.getenv('TEXT_AI_PROVIDER', '').lower()
VOICE_AI_PROVIDER = os.getenv('VOICE_AI_PROVIDER', '').lower()

# --- –ö–ª—é—á–∏ API ---
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
HUGGINGFACE_API_TOKEN = os.getenv('HUGGINGFACE_API_TOKEN')

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π ---
LOCAL_LLM_PATH = os.getenv('LOCAL_LLM_PATH', os.path.join(DATA_DIR, 'models', 'mistral-7b-grok-Q4_K_M.gguf'))
LOCAL_WHISPER_PATH = os.getenv('LOCAL_WHISPER_PATH', os.path.join(DATA_DIR, 'models', 'ggml-small-q8_0.bin'))

# --- –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π LLM ---
LOCAL_LLM_MODEL_TYPE = os.getenv('LOCAL_LLM_MODEL_TYPE', 'mistral')
LLM_MAX_NEW_TOKENS = int(os.getenv('LLM_MAX_NEW_TOKENS', 1536))
LLM_CONTEXT_LENGTH = int(os.getenv('LLM_CONTEXT_LENGTH', 4096))
LLM_TEMPERATURE = float(os.getenv('LLM_TEMPERATURE', 0.3))
LLM_GPU_LAYERS = int(os.getenv('LLM_GPU_LAYERS', 0))

# --- –ù–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê: –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ ---
# –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: "kb_then_web", "kb_only", "web_only"
SEARCH_MODE = os.getenv('SEARCH_MODE', 'kb_then_web')
if SEARCH_MODE not in ["kb_then_web", "kb_only", "web_only"]:
    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SEARCH_MODE: {SEARCH_MODE}. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'kb_then_web'.")
    SEARCH_MODE = 'kb_then_web'
# ----------------------------------------

if TEXT_AI_PROVIDER == 'local':
    if not LOCAL_LLM_PATH:
        logger.error("LOCAL_LLM_PATH –Ω–µ –∑–∞–¥–∞–Ω –≤ .env, –Ω–æ TEXT_AI_PROVIDER —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 'local'.")
    elif not str(LOCAL_LLM_PATH).lower().endswith(".gguf"):
        logger.error(f"LOCAL_LLM_PATH '{LOCAL_LLM_PATH}' –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .gguf.")
    elif not os.path.isfile(LOCAL_LLM_PATH):
        logger.error(f"–§–∞–π–ª GGUF –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: '{LOCAL_LLM_PATH}'. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é `download_model.py`.")

if VOICE_AI_PROVIDER == 'local':
    if not LOCAL_WHISPER_PATH:
        logger.error("LOCAL_WHISPER_PATH –Ω–µ –∑–∞–¥–∞–Ω –≤ .env, –Ω–æ VOICE_AI_PROVIDER —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 'local'.")
    elif not os.path.isfile(LOCAL_WHISPER_PATH):
        logger.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ Whisper –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: '{LOCAL_WHISPER_PATH}'.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Google Custom Search ---
GOOGLE_CSE_ID = os.getenv('GOOGLE_CSE_ID')
GOOGLE_API_KEY_SEARCH = os.getenv('GOOGLE_API_KEY_SEARCH')

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º ---
_allowed_ids_str = os.getenv('ALLOWED_TELEGRAM_IDS', '')
ALLOWED_TELEGRAM_IDS = []
if _allowed_ids_str.strip():
    try:
        ALLOWED_TELEGRAM_IDS = [int(id.strip()) for id in _allowed_ids_str.split(',') if id.strip().isdigit()]
        if ALLOWED_TELEGRAM_IDS:
             logger.info(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö ID: {ALLOWED_TELEGRAM_IDS}")
    except (ValueError, TypeError):
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ALLOWED_TELEGRAM_IDS: '{_allowed_ids_str}'.")
else:
    logger.info("–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ALLOWED_TELEGRAM_IDS –Ω–µ –∑–∞–¥–∞–Ω).")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()
LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
LOG_FILE_PATH = os.path.join(DATA_DIR, 'bot.log')

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ ---
CONVERSATION_TIMEOUT = int(os.getenv('CONVERSATION_TIMEOUT', 600))
CONVERSATION_WARNING_TIMEOUT_SECONDS = int(os.getenv('CONVERSATION_WARNING_TIMEOUT_SECONDS', 300))
CONVERSATION_HISTORY_DEPTH = int(os.getenv('CONVERSATION_HISTORY_DEPTH', 10))
LLM_HISTORY_SUMMARIZE_THRESHOLD = int(os.getenv('LLM_HISTORY_SUMMARIZE_THRESHOLD', 20))

# --- –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---
DOWNLOADS_DIR = os.path.join(DATA_DIR, 'downloads')
VOICE_MESSAGES_DIR = os.path.join(DATA_DIR, 'voice_messages')

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Google Drive Service ---
GOOGLE_DRIVE_CREDENTIALS_PATH = os.path.join(DATA_DIR, 'client_secret.json')
GOOGLE_DRIVE_TOKEN_PATH = os.path.join(DATA_DIR, 'token.json')
GOOGLE_API_SCOPES = ['https://www.googleapis.com/auth/drive.readonly', 'https://www.googleapis.com/auth/drive.file']

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Knowledge Base Service ---
EMBEDDING_MODEL_NAME = os.getenv('EMBEDDING_MODEL_NAME', 'sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
VECTOR_STORE_PATH = os.path.join(DATA_DIR, 'faiss_index')
SOURCE_MAP_PATH = os.path.join(DATA_DIR, 'source_map.json')

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ---
MAX_FILE_SIZE_MB = int(os.getenv('MAX_FILE_SIZE_MB', 50))

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---
MAIN_KEYBOARD_MARKUP = ReplyKeyboardMarkup(
    [
        ["üìö –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å Google Drive", "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ü–ö/—Ç–µ–ª–µ—Ñ–æ–Ω–∞"],
        ["üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"],
        ["üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–∞–∑–æ–π –ó–Ω–∞–Ω–∏–π", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –°—Ç–∞—Ç—É—Å"]
    ],
    resize_keyboard=True
)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ---
for directory in [DATA_DIR, DOWNLOADS_DIR, VOICE_MESSAGES_DIR]:
    if not os.path.exists(directory):
        try:
            os.makedirs(directory)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        except OSError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {directory}: {e}")

# END OF FILE config.py #