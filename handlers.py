# START OF FILE handlers.py #

import logging
import os
import asyncio
from uuid import uuid4
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from telegram.error import BadRequest
import mimetypes

from config import (
    DOWNLOADS_DIR, VOICE_MESSAGES_DIR, CONVERSATION_HISTORY_DEPTH, LLM_HISTORY_SUMMARIZE_THRESHOLD,
    ALLOWED_TELEGRAM_IDS, LOG_FILE_PATH, MAIN_KEYBOARD_MARKUP, GOOGLE_DRIVE_TOKEN_PATH, MAX_FILE_SIZE_MB, SEARCH_MODE
)

from google_drive_service import GoogleDriveService
from file_parser_service import FileParserService
from knowledge_base_service import KnowledgeBaseService
import generative_ai_service
from generative_ai_service import GenerativeAIServiceFactory
import speech_to_text_service
from speech_to_text_service import get_stt_service
from external_knowledge_service import ExternalKnowledgeService
from status_service import StatusService
from settings_service import SettingsService

from decorators import authorized_only

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
drive_service: GoogleDriveService | None = None
parser_service: FileParserService | None = None
kb_service: KnowledgeBaseService | None = None
ai_service: generative_ai_service.BaseGenerativeService | None = None
stt_service: speech_to_text_service.BaseSpeechToTextService | None = None
ext_knowledge_service: ExternalKnowledgeService | None = None
status_service: StatusService | None = None
settings_service: SettingsService | None = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(RESET_CHAT_CONFIRM, AWAITING_AUTH_CODE) = range(100, 102)

active_llm_tasks: dict[int, asyncio.Task] = {}
llm_stop_events: dict[int, asyncio.Event] = {}

SUPPORTED_MIME_TYPES = {'application/pdf': '.pdf',
                        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
                        'text/plain': '.txt'}


def set_global_services(ds, ps, kbs, ais, stts, eks, sts, sers):
    global drive_service, parser_service, kb_service, ai_service, stt_service, ext_knowledge_service, status_service, settings_service
    drive_service, parser_service, kb_service, ai_service, stt_service, ext_knowledge_service, status_service, settings_service = ds, ps, kbs, ais, stts, eks, sts, sers


async def animate_thinking_message(context: CallbackContext, message_to_edit, stop_event: asyncio.Event,
                                   initial_text: str):
    states = [("–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...", "üîç"), ("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...", "üìà"), ("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...", "‚úçÔ∏è"),
              ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...", "üß†")]
    i = 0
    message_id, chat_id = message_to_edit.message_id, message_to_edit.chat_id
    try:
        await context.bot.edit_message_text(text=f"‚è≥ {initial_text}", chat_id=chat_id, message_id=message_id)
        while not stop_event.is_set():
            try:
                animated_text = f"{states[i % len(states)][1]} {states[i % len(states)][0]}..."
                await context.bot.edit_message_text(text=animated_text, chat_id=chat_id, message_id=message_id,
                                                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
                                                        "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_llm_generation")]]))
            except BadRequest as e:
                if "Message is not modified" not in str(e): logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}"); break
            except Exception as e:
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}", exc_info=True); break
            i += 1
            await asyncio.sleep(1.2)
    except asyncio.CancelledError:
        logger.info(f"–ó–∞–¥–∞—á–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è chat_id {chat_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    finally:
        stop_event.set()
        if chat_id in active_llm_tasks:
            try:
                await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
            except BadRequest:
                pass


async def _process_question_logic(question: str, update: Update, context: CallbackContext):
    chat_id, message = update.effective_chat.id, update.effective_message
    if chat_id in active_llm_tasks and not active_llm_tasks[chat_id].done():
        llm_stop_events[chat_id].set()
        try:
            await asyncio.wait_for(active_llm_tasks[chat_id], timeout=1.0)
        except (asyncio.TimeoutError, asyncio.CancelledError):
            pass
        if chat_id in active_llm_tasks: del active_llm_tasks[chat_id]
        if chat_id in llm_stop_events: del llm_stop_events[chat_id]
        await message.reply_text("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π.")
    stop_event = asyncio.Event()
    llm_stop_events[chat_id] = stop_event
    thinking_message = await message.reply_text("‚è≥ –ü–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    animation_task = asyncio.create_task(
        animate_thinking_message(context, thinking_message, stop_event, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."))
    active_llm_tasks[chat_id] = animation_task
    try:
        history = context.user_data.setdefault('conversation_history', [])
        if len(history) >= LLM_HISTORY_SUMMARIZE_THRESHOLD and ai_service:
            summarized_history = await ai_service.summarize_history(history)
            if summarized_history and not summarized_history.startswith("–û—à–∏–±–∫–∞"):
                context.user_data['conversation_history'] = [(summarized_history, "")]
                history = context.user_data['conversation_history']

        context_text, sources = "", []

        if SEARCH_MODE in ['kb_then_web', 'kb_only'] and kb_service and kb_service.vector_store:
            await thinking_message.edit_text("üîç –ò—â—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
            search_results = await asyncio.to_thread(kb_service.search, question, k=4)
            if search_results:
                context_text = "\n\n".join([doc.page_content for doc in search_results])
                sources = sorted(list(set([doc.metadata.get('source', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π') for doc in search_results])))

        if not context_text and SEARCH_MODE in ['kb_then_web', 'web_only'] and ext_knowledge_service:
            await thinking_message.edit_text("üåê –ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
            web_context, web_source = await asyncio.to_thread(ext_knowledge_service.search, question)
            if web_context:
                context_text, sources = web_context, [web_source]

        if not context_text:
            await thinking_message.edit_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π, –Ω–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.",
                reply_markup=None)
            return

        if not ai_service:
            await thinking_message.edit_text(
                f"‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ (LLM) –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n\"{context_text[:1000]}...\"",
                reply_markup=None)
            return

        await thinking_message.edit_text("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
        generated_answer = await ai_service.generate_answer(question, context_text, history, stop_event)

        if stop_event.is_set(): raise asyncio.CancelledError("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        if generated_answer.startswith("–û—à–∏–±–∫–∞:"):
            await thinking_message.edit_text(f"‚ùå {generated_answer}", reply_markup=None)
            return

        history.append((question, generated_answer))
        context.user_data['conversation_history'] = history[-CONVERSATION_HISTORY_DEPTH:]
        source_display = "\n\n<i>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</i>\n" + "\n".join(
            [f"‚Ä¢ <code>{s}</code>" for s in sources]) if sources else ""
        await thinking_message.edit_text(f"{generated_answer}{source_display}", parse_mode='HTML', reply_markup=None)

    except asyncio.CancelledError:
        await thinking_message.edit_text("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è chat_id {chat_id}: {e}", exc_info=True)
        await thinking_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}", reply_markup=None)
    finally:
        stop_event.set()
        if chat_id in active_llm_tasks:
            if not active_llm_tasks[chat_id].done(): active_llm_tasks[chat_id].cancel()
            del active_llm_tasks[chat_id]
        if chat_id in llm_stop_events: del llm_stop_events[chat_id]


@authorized_only
async def stop_llm_generation(update: Update, context: CallbackContext):
    query = update.callback_query
    chat_id = query.message.chat_id
    await query.answer("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...", show_alert=False)
    if chat_id in llm_stop_events:
        llm_stop_events[chat_id].set()
    else:
        await query.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", reply_markup=None)


@authorized_only
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    await update.message.reply_html(f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.",
                                    reply_markup=MAIN_KEYBOARD_MARKUP)


@authorized_only
async def handle_telegram_document_upload(update: Update, context: CallbackContext):
    document = update.message.document
    if not all([parser_service, kb_service]):
        await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        return

    file_name = document.file_name
    _, file_extension = os.path.splitext(file_name.lower())
    supported_extensions = ['.pdf', '.docx', '.txt', '.md', '.pptx', '.html']
    if file_extension not in supported_extensions:
        await update.message.reply_text(f"‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ '{file_extension}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return

    thinking_message = await update.message.reply_text(f"‚è≥ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{file_name}'. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    download_path = os.path.join(DOWNLOADS_DIR, f"{uuid4()}_{file_name}")

    try:
        telegram_file = await context.bot.get_file(document.file_id)
        await telegram_file.download_to_drive(download_path)

        file_size_mb = os.path.getsize(download_path) / (1024 * 1024)
        if file_size_mb > MAX_FILE_SIZE_MB:
            await thinking_message.edit_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f} –ú–ë). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_MB} –ú–ë.")
            return

        await thinking_message.edit_text(f"‚è≥ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ '{file_name}' (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
        extracted_text = await asyncio.to_thread(parser_service.extract_text, download_path)

        if not extracted_text:
            raise Exception(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç. –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∫–∞–Ω—ã) –∏–ª–∏ –∏–º–µ—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–π/–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

        await thinking_message.edit_text(f"‚è≥ –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é –∑–Ω–∞–Ω–∏—è –∏–∑ '{file_name}'...")
        source_id = f"local_{uuid4()}"
        await asyncio.to_thread(kb_service.add_text, extracted_text,
                                metadata={"source": file_name, "source_id": source_id})

        await thinking_message.edit_text(f"‚úÖ –§–∞–π–ª <b>{file_name}</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!",
                                         parse_mode='HTML')

    except ValueError as ve:
        await thinking_message.edit_text(f"‚ùå {ve}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{file_name}': {e}", exc_info=True)
        await thinking_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n\n<pre>{e}</pre>",
                                         parse_mode='HTML')
    finally:
        if os.path.exists(download_path):
            try:
                os.remove(download_path)
            except OSError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {download_path}: {e}")


@authorized_only
async def handle_text_or_voice(update: Update, context: CallbackContext) -> None:
    user, question, oga_file_path = update.effective_user, "", None
    try:
        if update.message.voice:
            if not stt_service: await update.message.reply_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."); return
            thinking_message = await update.message.reply_text("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é...")
            oga_file_path = os.path.join(VOICE_MESSAGES_DIR, f"{uuid4()}.oga")
            voice_file = await context.bot.get_file(update.message.voice.file_id)
            await voice_file.download_to_drive(oga_file_path)
            question = await stt_service.transcribe_audio(oga_file_path)
            if not question or question.startswith("–û—à–∏–±–∫–∞:"): await thinking_message.edit_text(
                f"‚ùå {question or '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.'}"); return
            await thinking_message.delete()
            await update.message.reply_text(f"<i>–í–∞—à –≤–æ–ø—Ä–æ—Å: ¬´{question}¬ª</i>", parse_mode='HTML')
        else:
            question = update.message.text
            if question == "üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å": await update.message.reply_text(
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."); return
        if question: await _process_question_logic(question, update, context)
    finally:
        if oga_file_path and os.path.exists(oga_file_path):
            try:
                os.remove(oga_file_path)
            except OSError:
                pass


@authorized_only
async def reset_chat(update: Update, context: CallbackContext) -> int:
    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_chat_confirm"),
                 InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="reset_chat_cancel")]]
    await update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞?",
                                    reply_markup=InlineKeyboardMarkup(keyboard))
    return RESET_CHAT_CONFIRM


@authorized_only
async def reset_chat_confirm(update: Update, context: CallbackContext) -> int:
    query = update.callback_query;
    await query.answer()
    context.user_data.pop('conversation_history', None)
    await query.edit_message_text("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω.")
    return ConversationHandler.END


@authorized_only
async def reset_chat_cancel(update: Update, context: CallbackContext) -> int:
    query = update.callback_query;
    await query.answer()
    await query.edit_message_text("‚ùå –°–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END


@authorized_only
async def upload_file_start(update: Update, context: CallbackContext) -> None:
    message = update.message
    if not drive_service or not drive_service.is_authenticated:
        await message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Google Drive: /connect_google_drive",
                                 reply_markup=MAIN_KEYBOARD_MARKUP)
        return
    await message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –≤–∞—à–µ–≥–æ Google Drive...")
    await list_drive_files_paginated(update, context, page=0)


@authorized_only
async def knowledge_base_menu(update: Update, context: CallbackContext) -> None:
    keyboard = [[InlineKeyboardButton("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="kb_list_files_0")],
                [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π", callback_data="kb_clear_all_confirm")]]

    # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –∫–æ–ª–±—ç–∫
    target_message = update.message if update.message else update.callback_query.message
    await target_message.reply_text("üìö –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π:",
                                    reply_markup=InlineKeyboardMarkup(keyboard))


async def list_indexed_files(update: Update, context: CallbackContext, page: int = 0):
    query = update.callback_query
    if query: await query.answer()

    if not kb_service:
        await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return

    indexed_sources = await asyncio.to_thread(kb_service.get_indexed_sources)

    if not indexed_sources:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="kb_menu_back")]]
        await query.edit_message_text("‚ÑπÔ∏è –í–∞—à–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                                      reply_markup=InlineKeyboardMarkup(keyboard))
        return

    items_per_page = 5
    start_index, end_index = page * items_per_page, start_index + items_per_page
    paginated_sources = indexed_sources[start_index:end_index]

    keyboard = []
    for source in paginated_sources:
        file_name = source['source']
        display_name = (file_name[:40] + '...') if len(file_name) > 43 else file_name
        keyboard.append([InlineKeyboardButton(f"üìÑ {display_name}", callback_data=f"kb_noop"),
                         InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"kb_delete_{source['source_id']}_{page}")])

    pg_btns = []
    if page > 0: pg_btns.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"kb_list_files_{page - 1}"))
    if end_index < len(indexed_sources): pg_btns.append(
        InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"kb_list_files_{page + 1}"))
    if pg_btns: keyboard.append(pg_btns)

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="kb_menu_back")])

    await query.edit_message_text(f"üóÇÔ∏è –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):",
                                  reply_markup=InlineKeyboardMarkup(keyboard))


@authorized_only
async def handle_kb_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    data = query.data

    if data.startswith("kb_list_files_"):
        await query.answer()
        page = int(data.split('_')[-1])
        await list_indexed_files(update, context, page=page)
        return

    if data.startswith("kb_delete_"):
        await query.answer()
        parts = data.split('_')
        source_id, page_to_return = parts[2], int(parts[3])
        if kb_service and await asyncio.to_thread(kb_service.delete_by_source_id, source_id):
            await query.edit_message_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫...")
            await list_indexed_files(update, context, page=page_to_return)
        else:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.", show_alert=True)
        return

    if data == "kb_clear_all_confirm":
        await query.answer()
        await query.edit_message_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã? –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å",
                                                                                               callback_data="kb_clear_all_execute"),
                                                                          InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
                                                                                               callback_data="kb_list_files_0")]]))
        return

    if data == "kb_clear_all_execute":
        await query.answer()
        if kb_service:
            await asyncio.to_thread(kb_service.clear_all)
            await query.edit_message_text("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.")
        else:
            await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        await query.message.delete()
        await knowledge_base_menu(query.message, context)
        return

    if data == "kb_menu_back":
        await query.answer()
        await query.message.delete()
        await knowledge_base_menu(update.effective_message, context)
        return

    if data == "kb_noop":
        await query.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å' –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    if data.startswith("cancel_upload") or data.startswith("gdrive_"):
        await query.answer()
        if data == "cancel_upload":
            try:
                await query.message.delete()
            except BadRequest:
                pass
            await query.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MAIN_KEYBOARD_MARKUP)
        elif data.startswith("gdrive_page_"):
            await list_drive_files_paginated(update, context, page=int(data.split('_')[-1]), from_callback=True)
        elif data.startswith("gdrive_select_"):
            await handle_file_selection(update, context)


async def list_drive_files_paginated(update: Update, context: CallbackContext, page: int = 0,
                                     from_callback: bool = False):
    target_message = update.message if not from_callback else update.callback_query.message
    if not from_callback and update.message and update.message.text:
        try:
            await update.message.delete()
        except BadRequest:
            pass
    all_files = await drive_service.list_files(page_size=1000)
    if not all_files:
        text, reply_markup = "üìÇ –ù–∞ –≤–∞—à–µ–º Google Drive –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤.", InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_upload")]])
        if from_callback:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await target_message.reply_text(text, reply_markup=reply_markup)
        return
    processable_files = [f for f in all_files if f.get('mimeType') in SUPPORTED_MIME_TYPES]
    if not processable_files:
        text, reply_markup = "üìÇ –ù–∞ GDrive –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOCX, TXT).", InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_upload")]])
        if from_callback:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await target_message.reply_text(text, reply_markup=reply_markup)
        return
    items_per_page = 5
    start_index, end_index = page * items_per_page, (page + 1) * items_per_page
    paginated_files = processable_files[start_index:end_index]
    keyboard = [[InlineKeyboardButton(f"üìÑ {f.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}", callback_data=f"gdrive_select_{f.get('id')}")]
                for f in paginated_files]
    pg_btns = []
    if page > 0: pg_btns.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"gdrive_page_{page - 1}"))
    if end_index < len(processable_files): pg_btns.append(
        InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"gdrive_page_{page + 1}"))
    if pg_btns: keyboard.append(pg_btns)
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_upload")])
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:'
    if from_callback:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await target_message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


@authorized_only
async def handle_file_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    file_id = query.data.split('_')[-1]
    if not all([drive_service, parser_service, kb_service]): await query.edit_message_text(
        "‚ùå –û–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."); return
    download_path = ""
    try:
        if not drive_service or not drive_service.service: await query.edit_message_text(
            "‚ùå –°–µ—Ä–≤–∏—Å Google Drive –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."); return
        file_info = await asyncio.to_thread(
            lambda: drive_service.service.files().get(fileId=file_id, fields='name, size').execute())
        file_name, file_size = file_info.get('name', file_id), int(file_info.get('size', 0)) / (1024 * 1024)
        if file_size > MAX_FILE_SIZE_MB:
            await query.edit_message_text(f"‚ùå –§–∞–π–ª <b>{file_name}</b> ({file_size:.2f} –ú–ë) > {MAX_FILE_SIZE_MB} –ú–ë.",
                                          parse_mode='HTML', reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"gdrive_page_0")]]))
            return
        await query.edit_message_text(f"‚è≥ –°–∫–∞—á–∏–≤–∞—é –∏ –ø–∞—Ä—Å—é <b>{file_name}</b>...", parse_mode='HTML')
        download_path = os.path.join(DOWNLOADS_DIR, f"{uuid4()}_{file_name}")
        if not await drive_service.download_file(file_id, download_path): raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
        extracted_text = await asyncio.to_thread(parser_service.extract_text, download_path)
        if not extracted_text:
            await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ <b>{file_name}</b>.", parse_mode='HTML',
                                          reply_markup=InlineKeyboardMarkup(
                                              [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"gdrive_page_0")]]))
            return
        await query.edit_message_text(f"‚è≥ –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é –∑–Ω–∞–Ω–∏—è –∏–∑ <b>{file_name}</b>...", parse_mode='HTML')
        await asyncio.to_thread(kb_service.add_text, extracted_text,
                                metadata={"source": file_name, "source_id": file_id})
        await query.edit_message_text(text=f"‚úÖ –ó–Ω–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ <b>{file_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
                                      reply_markup=InlineKeyboardMarkup(
                                          [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="cancel_upload")]]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_id}: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {e}", parse_mode='HTML')
    finally:
        if download_path and os.path.exists(download_path):
            try:
                os.remove(download_path)
            except OSError:
                pass


@authorized_only
async def settings_and_status_command(update: Update, context: CallbackContext) -> None:
    if not status_service: await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."); return
    await status_service.get_status(update, context)


@authorized_only
async def logs_command(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if ALLOWED_TELEGRAM_IDS and user.id not in ALLOWED_TELEGRAM_IDS: await update.message.reply_text(
        "‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."); return
    if not os.path.exists(LOG_FILE_PATH): await update.message.reply_text(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    try:
        with open(LOG_FILE_PATH, 'rb') as f:
            f.seek(0, os.SEEK_END)
            f.seek(max(f.tell() - 4000, 0), os.SEEK_SET)
            log_text = f.read().decode('utf-8', errors='ignore')
        if not log_text.strip():
            await update.message.reply_text("üìú –õ–æ–≥ –ø—É—Å—Ç.")
        else:
            await update.message.reply_html(f"üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–∞:</b>\n\n<code>{log_text}</code>")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏: {e}")


@authorized_only
async def connect_google_drive(update: Update, context: CallbackContext) -> int:
    global drive_service
    if not drive_service: await update.message.reply_html(
        "‚ùå –°–µ—Ä–≤–∏—Å Google Drive –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω."); return ConversationHandler.END
    if drive_service.is_authenticated: await update.message.reply_text(
        "‚úÖ Google Drive —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω."); return ConversationHandler.END
    auth_url = drive_service.get_auth_url()
    if auth_url:
        await update.message.reply_html(
            f'<b>–®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n<a href="{auth_url}">–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å</a>\n\n<b>–®–∞–≥ 2:</b> –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.',
            disable_web_page_preview=True)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Google:")
        return AWAITING_AUTH_CODE
    else:
        await update.message.reply_html(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ `client_secret.json` –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ `data`.")
        return ConversationHandler.END


@authorized_only
async def handle_auth_code(update: Update, context: CallbackContext) -> int:
    if not drive_service: await update.message.reply_html(
        "‚ùå –°–µ—Ä–≤–∏—Å Google Drive –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω."); return ConversationHandler.END
    auth_code = update.message.text.strip()
    if await asyncio.to_thread(drive_service.complete_authentication, auth_code):
        await update.message.reply_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç Google Drive —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!", reply_markup=MAIN_KEYBOARD_MARKUP)
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /connect_google_drive –µ—â–µ —Ä–∞–∑.")
    return ConversationHandler.END


@authorized_only
async def cancel_google_drive_auth(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Drive –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MAIN_KEYBOARD_MARKUP)
    return ConversationHandler.END

# END OF FILE handlers.py #